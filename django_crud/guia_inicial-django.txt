0) Crear y/o activar ambiente virtual adecuado al caso.
   En el caso de ser un entorno nuevo, instalar Django con:

   pip install django

1) Crear proyecto. 

  A) Usando carpeta config:
  
  En la carpeta de su elección, abrir el terminal y ejecutar:
    
    mkdir 'nombre_proyecto'
    cd 'nombre_proyecto'
    django-admin startproject config .    
    python manage.py startapp 'nombre_app'
    code . -> abrir VSC

  B) Estilo clásico:

  En carpeta que aloje proyecto:

    django-admin startproject 'nombre_proyecto'
    cd 'nombre_proyecto'
    django-admin startapp 'nombre_app'
    code . -> abrir VSC

2) Configurar base de datos utilizando PogrestSQL:

  A) Crear base de datos para el proyecto: 'nombre_DB' y 'usuario_DB':
      
      i) ingresar terminal de posgres con privilegios admin equipo:

    sudo -u postgres psql

      ii) crear DB y usuario con privilegios para poder realizar luego tests:
    
    postgres=# CREATE DATABASE nombre_db;
    postgres=# CREATE USER user_db WITH PASSWORD '123456';
    postgres=# ALTER USER user_db CREATEDB;
    postgres=# GRANT ALL PRIVILEGES ON DATABASE nombre_db TO user_db;
    postgres=# \q

3) Configurar settings.py:

  A) Registrar aplicación:

INSTALLED_APPS = [
  . 
  .
  "nombre_app",
]

  B)  Migrar a postgreSQL, reemplazando sección DATABASES:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'nombre_db',  
        'USER': 'user_db',    
        'PASSWORD': 'your_password', 
        'HOST': 'localhost',  
        'PORT': '5432',       
    }
}

4) Primera Migración y prueba: 

  python manage.py makemigrations
  python manage.py migrate
  python manage.py runserver

7) Preparando el front, creación html considerando bootstrap:

  A) en el directorio /nombre_app/static crear:

    /css/style.css
    /js/scripts.js
    /img

  B) en el directorio /nombre_app/templates crear:

    i) base.html:

<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Django Project{% endblock %}</title>

    <!-- Bootstrap CSS CDN -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>

    <!-- Navbar -->
    {% include 'navbar.html' %}

    <!-- Main Content -->
    <div class="container mt-5">
        {% block content %}
        {% endblock %}
    </div>

    <!-- Footer -->
    {% include 'footer.html' %}

    <!-- Bootstrap JS, Popper.js, and jQuery CDN -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- Custom JS -->
    <script src="{% static 'js/scripts.js' %}"></script>

</body>
</html>

    ii) navbar.html

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="/">Mi Proyecto</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class="nav-link" href="/">Inicio</a>
            </li>
            {% if user.is_authenticated %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'logout' %}">Cerrar sesión</a>
                </li>
            {% else %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'login' %}">Iniciar sesión</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'register' %}">Registrarse</a>
                </li>
            {% endif %}
        </ul>
    </div>
</nav>

    iii) footer.html

<footer class="footer mt-auto py-3 bg-light text-center">
    <div class="container">
        <span class="text-muted">Diseñado por Rubén Schnetter.</span>
    </div>
</footer>

    iv) index.html

{% extends 'base.html' %}

{% block title %}Inicio{% endblock %}

{% block content %}
<div class="jumbotron">
    <h1 class="display-4">Hola, bienvenido al proyecto</h1>
    <p class="lead">Este es un proyecto de Django con autenticación y Bootstrap.</p>
</div>
{% endblock %}

    v) login.html

{% extends 'base.html' %}

{% block title %}Iniciar sesión{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Iniciar sesión</h2>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Iniciar sesión</button>
        </form>
    </div>
</div>
{% endblock %}

    vi) register.html

{% extends 'base.html' %}

{% block title %}Iniciar sesión{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Iniciar sesión</h2>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Iniciar sesión</button>
        </form>
    </div>
</div>
{% endblock %}

    vii) logout.html

{% extends 'base.html' %}

{% block title %}Cierre de sesión{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Has cerrado sesión correctamente</h2>
        <a href="{% url 'login' %}" class="btn btn-primary">Iniciar sesión nuevamente</a>
    </div>
</div>
{% endblock %}

*Aun no levantar server, ya que falta aún las vistas, que se generaran ahora*

7) Sistema de autentificación:

  A) Crear superusuario:

  python manage.py createsuperuser

  B) Modificar urls.py del proyecto y app:

    i) En urls.py del proyecto:

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),            
    path('', include('nombre_app.urls')),
]

    ii) En urls.py de la app:

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views 

urlpatterns = [
    path('', views.index, name='index'),
    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),
    path('register/', views.register, name='register'), 
]
  
  C) Crear las vistas en views.py:

from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
from django.shortcuts import redirect

def index(request):
    return render(request, 'index.html')

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # Autenticar automáticamente al usuario
            return redirect('home')  # Redirigir a la página de inicio después de registrarse
    else:
        form = UserCreationForm()

    return render(request, 'register.html', {'form': form})

8) Nueva prueba, levantar servidor:

python manage.py runserver

Con esto estaría listo un proyecto con:
- creación de una app
- vinculación a postgreSQL
- habilitación sitio admin (superusuario)
- sistema de registro de usuarios
- front básico con bootstrap y codigo html en bloques

Continuará con:
- Inclusión de modelos
- Sistema CRUD

-- PARTE 2 --

Creación de un CRUD tomando como referencia una lista de tareas.

Para facilitar la personalización, modificaremos el modelo de autentificación por uno personalizado.

0) Crear sistema de registro personalizado:

  A) En forms.py añadimos para generar un nuevo registro personalizado:

from django.contrib.auth.models import User

class RegistroForm(forms.ModelForm):
    password1 = forms.CharField(
        label="Contraseña",
        widget=forms.PasswordInput,
        required=True
    )
    password2 = forms.CharField(
        label="Confirmar Contraseña",
        widget=forms.PasswordInput,
        required=True
    )

    class Meta:
        model = User
        fields = ['username', 'email']  # Campos que queremos en el formulario de registro

    def clean(self):
        cleaned_data = super().clean()
        password1 = cleaned_data.get("password1")
        password2 = cleaned_data.get("password2")

        if password1 and password2 and password1 != password2:
            self.add_error('password2', "Las contraseñas no coinciden.")

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user

    B) añadimos al views.py:

from django.contrib.auth.decorators import login_required, permission_required

def register(request):
    if request.method == 'POST':
        form = RegistroForm(request.POST)
        if form.is_valid():
            user = form.save()

            login(request, user)  # Autenticar al usuario después del registro
            return redirect('index')
    else:
        form = RegistroForm()
    return render(request, 'register.html', {'form': form})

  C) Añadimos al settings.py:

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login'

1) Crear el modelo tipo CRUD. En este caso será una lista de tareas. En models.py:

from django.db import models
from django.contrib.auth.models import User

class Tarea(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE) 
    titulo = models.CharField(max_length=255)
    descripcion = models.TextField(blank=True, null=True)
    completado = models.BooleanField(default=False)
    creado = models.DateTimeField(auto_now_add=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE, related_name='tareas')

    def __str__(self):
        return self.titulo

2) Crear el formulario en forms.py:

from django import forms
from .models import Tarea

class TareaForm(forms.ModelForm):
    class Meta:
        model = Tarea
        fields = ['titulo', 'descripcion', 'completado'] #no usamos todos los campos para no repetir ingresar usuario.

3) Crearemos un permiso especial, el de 'editor_access', y se asignará a todo nuevo usuario registrado:

  A) Registramos en admin.py nuestro modelo:

from django.contrib import admin
from .models import Tarea

@admin.register(Tarea)
class TareaAdmin(admin.ModelAdmin):
    list_display = ['titulo', 'usuario', 'completado', 'creado']
  
  B) En models.py creamos el permiso, al final de classTarea:

class Meta:
        # Agregar permisos personalizados en Meta
        permissions = [
            ('editor_access', 'Permiso para agregar, editar y eliminar tareas'),
        ]

  C) En views.py generamos el permiso por defecto a todo nuevo usuario:

from django.contrib.auth.models import Permission

# Modificamos función register:

def register(request):
    if request.method == 'POST':
        form = RegistroForm(request.POST)
        if form.is_valid():
            user = form.save()

            # Asignar el permiso "editor_access" directamente al usuario
            permiso_editor = Permission.objects.get(codename='editor_access')
            user.user_permissions.add(permiso_editor)

            login(request, user)  # Autenticar al usuario después del registro
            return redirect('index')
    else:
        form = RegistroForm()
    return render(request, 'register.html', {'form': form})

  D) Seguimos en views.py, ahora restricción de visualización:

from django.shortcuts import get_object_or_404
from django.contrib.auth.decorators import login_required, permission_required
from .models import Tarea
from .forms import TareaForm
from django.http import HttpResponseForbidden

# Vista para listar tareas
def lista_tareas(request):
    tareas = Tarea.objects.all()
    visitas = request.session.get('visitas', 0)  # Obtener el número de visitas de la sesión
    request.session['visitas'] = visitas + 1  # Incrementar el contador de visitas
    return render(request, 'lista_tareas.html', {'tareas': tareas, 'visitas': visitas})

# Vista para agregar tarea (solo permitido para "editor")
@login_required
@permission_required('todolist.editor_access', raise_exception=True)
def agregar_tarea(request):
    if request.method == 'POST':
        form = TareaForm(request.POST)
        if form.is_valid():
            tarea = form.save(commit=False)
            tarea.usuario = request.user  # Asigna la tarea al usuario que está autenticado
            tarea.save()
            return redirect('lista_tareas')
    else:
        form = TareaForm()
    return render(request, 'agregar_tarea.html', {'form': form})

# Vista para editar tarea (solo permitido para "editor" y el propietario de la tarea)
@login_required
@permission_required('todolist.editor_access', raise_exception=True)
def editar_tarea(request, pk):
    tarea = get_object_or_404(Tarea, pk=pk)

    # Verificar que la tarea pertenezca al usuario que la intenta editar
    if tarea.usuario != request.user:
        return HttpResponseForbidden("No tienes permiso para editar esta tarea.")

    if request.method == 'POST':
        form = TareaForm(request.POST, instance=tarea)
        if form.is_valid():
            form.save()
            return redirect('lista_tareas')
    else:
        form = TareaForm(instance=tarea)
    
    return render(request, 'editar_tarea.html', {'form': form, 'tarea': tarea})

# Vista para eliminar tarea (solo permitido para "editor" y el propietario de la tarea)
@login_required
@permission_required('todolist.editor_access', raise_exception=True)
def eliminar_tarea(request, pk):
    tarea = get_object_or_404(Tarea, pk=pk)

    # Verificar que la tarea pertenezca al usuario que la intenta eliminar
    if tarea.usuario != request.user:
        return HttpResponseForbidden("No tienes permiso para eliminar esta tarea.")

    if request.method == 'POST':
        tarea.delete()
        return redirect('lista_tareas')

    return render(request, 'eliminar_tarea.html', {'tarea': tarea})

4) Agregaremos un contador de visitas en la página del CRUD:

  A) Creamos el modelo en models.py:

class Visitas(models.Model):
    contador = models.IntegerField(default=0)

    def __str__(self):
        return f"Visitas: {self.contador}"
  
  B) Generamos ahora la vista de la tabla CRUD con el contador en views.py:

def lista_tareas(request):
    tareas = Tarea.objects.all()  # Obtener todas las tareas de la base de datos
    visitas_obj, created = Visitas.objects.get_or_create(id=1)
        # Incrementar el contador de visitas
    visitas_obj.contador += 1
    visitas_obj.save()
    
    # Comprobar si el usuario tiene el permiso 'editor_access'
    user_is_editor = request.user.has_perm('todolist.editor_access')

    return render(request, 'lista_tareas.html', {
        'tareas': tareas,
        'visitas': visitas_obj.contador,
        'user_is_editor': user_is_editor  # Pasar esta variable a la plantilla
    })

  C) Realizamos migraciones:

  python manage.py makemigrations
  python manage.py migrate

5) Generamos los nuevos html:

  A) lista_tareas.html

{% extends 'base.html' %}

{% block title %}Lista de Tareas{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Lista de Tareas</h2>

    <!-- Mostrar el botón "Agregar Tarea" solo si el usuario tiene el permiso "editor_access" -->
    {% if user_is_editor %}
        <a href="{% url 'agregar_tarea' %}" class="btn btn-primary mb-3">Agregar Tarea</a>
    {% endif %}

    <!-- Tabla con la lista de tareas -->
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Título</th>
                <th>Descripción</th>
                <th>Estado</th>
                <th>Fecha ingreso</th>
                <th>Creado por</th> <!-- Nueva columna para el usuario -->
                {% if user_is_editor %}
                    <th>Acciones</th>
                {% endif %}
            </tr>
        </thead>
        <tbody>
            {% for tarea in tareas %}
                <tr>
                    <td>{{ tarea.titulo }}</td>
                    <td>{{ tarea.descripcion }}</td>
                    <td>{% if tarea.completado %}Completado{% else %}No completado{% endif %}</td>
                    <td>{{ tarea.creado }}</td>
                    <td>{{ tarea.usuario.username }}</td> <!-- Mostrar el nombre de usuario -->
                    {% if user_is_editor %}
                        <td>
                            <a href="{% url 'editar_tarea' tarea.pk %}" class="btn btn-warning btn-sm">Editar</a>
                            <a href="{% url 'eliminar_tarea' tarea.pk %}" class="btn btn-danger btn-sm">Eliminar</a>
                        </td>
                    {% endif %}
                </tr>
            {% empty %}
                <tr>
                    <td colspan="6">No hay tareas disponibles.</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <p>Número de visitas: {{ visitas }}</p>
</div>
{% endblock %}

    B) Actualizamos el navbar.html:

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="{% url 'index' %}">Proyecto</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'index' %}">Inicio</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'lista_tareas' %}">Tareas</a>
                </li>
            </ul>
            <ul class="navbar-nav ml-auto">
                {% if user.is_authenticated %}
                    <li class="nav-item">
                        <form method="post" action="{% url 'logout' %}">
                            {% csrf_token %}
                            <button type="submit" class="btn btn-link nav-link" style="color: inherit; text-decoration: none;">Cerrar sesión</button>
                        </form>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'login' %}">Iniciar sesión</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'register' %}">Registrarse</a>
                    </li>
                {% endif %}
            </ul>
        </div>
    </div>
</nav>

  C) crear agregar_tarea.html:

{% extends 'base.html' %}

{% block title %}Agregar Tarea{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2 class="mb-4">Agregar Nueva Tarea</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Agregar Tarea</button>
    </form>
</div>
{% endblock %}

  D) Agregar editar_tarea.html:

{% extends 'base.html' %}

{% block title %}Editar Tarea{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Editar Tarea</h2>

    <!-- Formulario para editar tarea -->
    <form method="post" action="{% url 'editar_tarea' tarea.pk %}">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Guardar cambios</button>
    </form>

    <!-- Botón para volver a la lista de tareas -->
    <a href="{% url 'lista_tareas' %}" class="btn btn-secondary mt-3">Volver a la lista de tareas</a>
</div>
{% endblock %}

  E) crear eliminar_tarea.html

{% extends 'base.html' %}

{% block title %}Eliminar Tarea{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>¿Estás seguro de que deseas eliminar esta tarea?</h2>
    <p><strong>Título:</strong> {{ tarea.titulo }}</p>
    <p><strong>Descripción:</strong> {{ tarea.descripcion }}</p>

    <!-- Formulario para confirmar la eliminación -->
    <form method="post" action="{% url 'eliminar_tarea' tarea.pk %}">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Eliminar Tarea</button>
    </form>

    <!-- Botón para cancelar -->
    <a href="{% url 'lista_tareas' %}" class="btn btn-secondary mt-3">Cancelar</a>
</div>
{% endblock %}

  F) Actualizamos login.html:

<!-- templates/login.html -->
{% extends 'base.html' %}

{% block title %}Iniciar sesión{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Iniciar sesión</h2>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Iniciar sesión</button>
        </form>
    </div>
</div>
{% endblock %}

G) Actualizamos logout.html:

<!-- templates/logout.html -->
{% extends 'base.html' %}

{% block title %}Cierre de sesión{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Has cerrado sesión correctamente</h2>
        <a href="{% url 'login' %}" class="btn btn-primary">Iniciar sesión nuevamente</a>
    </div>
</div>
{% endblock %}

  H) Actualizamos register.html:

<!-- templates/register.html -->
{% extends 'base.html' %}

{% block title %}Registrarse{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Registrarse</h2>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Registrarse</button>
        </form>
    </div>
</div>
{% endblock %}

  6) Generamos migraciones y probamos:

  python manage.py makemigrations
  python manage.py migrate
  python manage.py runserver

